// Read the config and call createsecondary api if instance_type is SECONDARY

var instanceType interface{}
var cluster interface{}

if val, ok := obj["instanceType"]; ok {
    instanceType = val
}

cluster = d.Get("cluster")

if instanceType == "SECONDARY" {
    if cluster != nil {
        url = strings.Replace(url, "instances?instanceId", "instances:createsecondary?instanceId", 1)
    } else {
        return fmt.Errorf("Ill defined cluster name when creating secondary instance.")
    }
}

// Only set the default SSL mode if the user does not explicitly specify it
var requireConnectors interface{}
setDefaultSSLMode := false
clientConnectionConfig := make(map[string]interface{})
sslConfig := make(map[string]interface{})

if obj["clientConnectionConfig"] != nil {
	c := obj["clientConnectionConfig"].(map[string]interface{})
	if c["requireConnectors"] != nil {
		requireConnectors = c["requireConnectors"]
	}
	if c["sslConfig"] != nil {
		s := c["sslConfig"].(map[string]interface{})
		if s["sslMode"] == nil {
			setDefaultSSLMode = true
		}
	} else {
		setDefaultSSLMode = true
	}
} else {
	setDefaultSSLMode = true
}
if setDefaultSSLMode {
	sslConfig["sslMode"] = "ENCRYPTED_ONLY"
	clientConnectionConfig["sslConfig"] = sslConfig
	clientConnectionConfig["requireConnectors"] = requireConnectors
	obj["clientConnectionConfig"] = clientConnectionConfig
}