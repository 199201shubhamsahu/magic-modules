// Restrict modification of cluster_type from PRIMARY to SECONDARY as it is an invalid operation
if d.HasChange("cluster_type") && d.Get("cluster_type") == "SECONDARY"{
   return fmt.Errorf("Can not convert a primary cluster to a secondary cluster.")
}

// Implementation for cluster promotion
if d.HasChange("cluster_type") && d.Get("cluster_type") == "PRIMARY"{

    if !d.HasChange("secondary_config") || !tpgresource.IsEmptyValue(reflect.ValueOf(d.Get("secondary_config"))) {
        return fmt.Errorf("Remove the secondary_config field to promote the cluster to primary cluster.")
    }

    if len(updateMask) > 2{
        return fmt.Errorf("The only change when promoting a cluster should be \n1. Set cluster_type = PRIMARY \n2. Remove the secondary_config field from the config.")
    }

    // If necassary precondition checks for cluster promotion is fine ONLY then
    // Promote cluster as a separate implementation within the update logic

    url = strings.Split(url, "?updateMask=")[0] + ":promote"
    obj = make(map[string]interface{})

    // err == nil indicates that the billing_project value was found
    if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
        billingProject = bp
    }

    res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
        Config:    config,
        Method:    "POST",
        Project:   billingProject,
        RawURL:    url,
        UserAgent: userAgent,
        Body:      obj,
        Timeout:   d.Timeout(schema.TimeoutCreate),
    })
    if err != nil {
        return fmt.Errorf("Error promoting Cluster: %s", err)
    }

    err = AlloydbOperationWaitTime(
        config, res, project, "Promoting Cluster", userAgent,
        d.Timeout(schema.TimeoutCreate))

    if err != nil {
        return fmt.Errorf("Error waiting to promote Cluster: %s", err)
    }

    log.Printf("[DEBUG] Finished promoting Cluster %q: %#v", d.Id(), res)

    return resourceAlloydbClusterRead(d, meta)

}

// TODO: Confirm if this behavior should be restricted or not
// Restrict modification of secondary_config for a secondary cluster unless it is for promotion
// if !d.HasChange("cluster_type") {
//     if d.HasChange("secondary_config") {
//         return fmt.Errorf("Can not modify secondary config after creation.")
//     }
// }